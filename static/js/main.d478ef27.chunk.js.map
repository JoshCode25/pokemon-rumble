{"version":3,"sources":["Components/SearchBox.js","Components/Card.js","Components/InfoLine.js","Components/MoveInfo.js","Components/PokemonInfo.js","Components/Pokemon/pikachu.js","Components/pokemonClass.js","Components/getNewPokemon.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","updateDisplay","submitInput","levelUp","className","id","type","placeholder","onChange","onBlur","min","max","value","onClick","Card","name","level","alt","src","InfoLine","MoveInfo","power","accuracy","levelLearnedAt","toUpperCase","PokemonInfo","pokemon","currentStats","map","stat","i","currentMovesList","move","pikachu","baseExperience","currentExperience","baseStats","learnedMovesList","damageClass","spriteList","url","types","Pokemon","identifier","this","parseInt","damage","currentHealth","abilities","isWild","wildMultiplier","getNewMoves","data","a","newMoves","allowableMovesList","Promise","all","moves","moveUrl","fetch","json","moveData","reduce","runningList","levelLearned","version_group_details","level_learned_at","moveInfo","damage_class","push","sort","x","y","getNewEvolutionChain","newName","species","speciesData","evolution_chain","evolutionChainData","newEvolutionChain","chain","evolves_to","length","currentStage","stageNumber","triggerType","evolutionArray","continueNum","evolution_details","trigger","pokemonStageInfo","stageName","stageUrl","evolutionType","evolutionTrigger","item","min_level","evolveToName","evolveToUrl","currentEvolutionStage","find","stage","nextStage","getNewTypes","getCurrentMoves","Level","shift","getNewStats","newStats","stats","base_stat","baseStat","currentLevel","currentName","Math","floor","getNewSprites","spriteKey","sprites","spriteName","spriteObject","newPokemon","response","evolutionData","base_experience","console","log","getNewPokemon","App","event","eventId","target","eventValue","state","identifierField","levelField","newSearchIdentifier","toLowerCase","setState","newSearchLevel","setNewPokemon","alert","tempDisplayPoke","Object","assign","displayPokemon","slice","newStat","baseStatValue","pokemonList","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d478ef27.chunk.js","sourcesContent":["import React from \"react\";\n\nconst SearchBox = ({ updateDisplay, submitInput, levelUp }) => {\n  return (\n    <div className=\"pa2 flex justify-center\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        id=\"searchIdentifier\"\n        type=\"search\"\n        placeholder=\"Name/Id\"\n        onChange={updateDisplay}\n        onBlur={updateDisplay}\n      />\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        id=\"searchLevel\"\n        type=\"number\"\n        min=\"1\"\n        max=\"100\"\n        placeholder=\"Level\"\n        onChange={updateDisplay}\n        onBlur={updateDisplay}\n      />\n      <input type=\"button\" value=\"submit\" onClick={submitInput} />\n      <input type=\"button\" value=\"Level Up\" onClick={levelUp} />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Card = ({ name, id, level }) => {\n  return (\n    <div className=\"grow ph4\">\n      <img\n        alt=\"pokemon\"\n        src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`}\n      />\n      <div>\n        <h2>{name}</h2>\n        <h3>{`Level: ${level}`}</h3>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\n\nconst InfoLine = ({ name, value }) => {\n  return (\n    <div className=\"flex justify-between ph2 grow\">\n      <h4 className=\"pv2 ph4 ma0 \">{`${name}: `}</h4>\n      <p className=\"pv2 ph4 ma0\">{value}</p>\n    </div>\n  );\n};\n\nexport default InfoLine;\n","import React from \"react\";\n\nconst MoveInfo = ({ name, type, power, accuracy, levelLearnedAt }) => {\n  return (\n    <div className=\"flex flex-column pa1 grow\">\n      <h3 className=\"ma0 pv2\">{name.toUpperCase()}</h3>\n      <div className=\"flex justify-between ph2\">\n        <p className=\"ph2 ma0\">{`Learned at LV: ${levelLearnedAt}`}</p>\n        <p className=\"ph2 ma0\">{type}</p>\n      </div>\n      <div className=\"flex justify-between ph2\">\n        <p className=\"ph2 ma0\">{`Power: ${power}`}</p>\n        <p className=\"ph2 ma0\">{`Accuracy: ${accuracy}%`}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default MoveInfo;\n","import React from \"react\";\nimport Card from \"./Card\";\nimport InfoLine from \"./InfoLine\";\nimport MoveInfo from \"./MoveInfo\";\n\nconst PokemonInfo = ({ pokemon }) => {\n  return (\n    <div className=\"flex justify-center items-center tc bg-light-green br3 pa4 ma1 dib bw2 shadow-5\">\n      <Card name={pokemon.name} id={pokemon.id} level={pokemon.level} />\n      <div>\n        {pokemon.currentStats.map((stat, i) => {\n          return (\n            <InfoLine\n              key={`${stat.name}${i}`}\n              name={stat.name}\n              value={stat.value}\n            />\n          );\n        })}\n      </div>\n      <div className=\"flex flex-wrap justify-center\">\n        {pokemon.currentMovesList.map((move, i) => {\n          return (\n            <MoveInfo\n              key={`${move.name}${i}`}\n              name={move.name}\n              type={move.type}\n              power={move.power}\n              accuracy={move.accuracy}\n              levelLearnedAt={move.levelLearnedAt}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default PokemonInfo;\n","const pikachu = {\n  name: \"Pikachu\",\n  id: 25,\n  level: 35,\n  baseExperience: 112,\n  currentExperience: 42875,\n  baseStats: [\n    {\n      name: \"hp\",\n      value: 35,\n    },\n    {\n      name: \"attack\",\n      value: 55,\n    },\n    {\n      name: \"defense\",\n      value: 40,\n    },\n    {\n      name: \"special-attack\",\n      value: 50,\n    },\n    {\n      name: \"special-defense\",\n      value: 50,\n    },\n    {\n      name: \"speed\",\n      value: 90,\n    },\n  ],\n  currentStats: [\n    {\n      name: \"hp\",\n      value: 69,\n    },\n    {\n      name: \"attack\",\n      value: 43,\n    },\n    {\n      name: \"defense\",\n      value: 33,\n    },\n    {\n      name: \"special-attack\",\n      value: 40,\n    },\n    {\n      name: \"special-defense\",\n      value: 40,\n    },\n    {\n      name: \"speed\",\n      value: 68,\n    },\n  ],\n  learnedMovesList: [\n    {\n      name: \"thunder-shock\",\n      levelLearnedAt: 1,\n      accuracy: 100,\n      power: 40,\n      type: \"electric\",\n      damageClass: \"special\",\n    },\n    {\n      name: \"slam\",\n      levelLearnedAt: 20,\n      accuracy: 75,\n      power: 80,\n      type: \"normal\",\n      damageClass: \"physical\",\n    },\n    {\n      name: \"agility\",\n      levelLearnedAt: 33,\n      accuracy: null,\n      power: null,\n      type: \"psychic\",\n      damageClass: \"status\",\n    },\n    {\n      name: \"quick-attack\",\n      levelLearnedAt: 16,\n      accuracy: 100,\n      power: 40,\n      type: \"normal\",\n      damageClass: \"physical\",\n    },\n    {\n      name: \"light-screen\",\n      levelLearnedAt: 50,\n      accuracy: null,\n      power: null,\n      type: \"psychic\",\n      damageClass: \"status\",\n    },\n    {\n      name: \"tail-whip\",\n      levelLearnedAt: 6,\n      accuracy: 100,\n      power: null,\n      type: \"normal\",\n      damageClass: \"status\",\n    },\n    {\n      name: \"thunder-wave\",\n      levelLearnedAt: 9,\n      accuracy: 90,\n      power: null,\n      type: \"electric\",\n      damageClass: \"status\",\n    },\n    {\n      name: \"thunder\",\n      levelLearnedAt: 43,\n      accuracy: 70,\n      power: 110,\n      type: \"electric\",\n      damageClass: \"special\",\n    },\n    {\n      name: \"growl\",\n      levelLearnedAt: 1,\n      accuracy: 100,\n      power: null,\n      type: \"normal\",\n      damageClass: \"status\",\n    },\n    {\n      name: \"play-nice\",\n      levelLearnedAt: 7,\n      accuracy: null,\n      power: null,\n      type: \"normal\",\n      damageClass: \"status\",\n    },\n    {\n      name: \"electro-ball\",\n      levelLearnedAt: 18,\n      accuracy: 100,\n      power: null,\n      type: \"electric\",\n      damageClass: \"special\",\n    },\n    {\n      name: \"spark\",\n      levelLearnedAt: 26,\n      accuracy: 100,\n      power: 65,\n      type: \"electric\",\n      damageClass: \"physical\",\n    },\n    {\n      name: \"discharge\",\n      levelLearnedAt: 37,\n      accuracy: 100,\n      power: 80,\n      type: \"electric\",\n      damageClass: \"special\",\n    },\n    {\n      name: \"feint\",\n      levelLearnedAt: 29,\n      accuracy: 100,\n      power: 30,\n      type: \"normal\",\n      damageClass: \"physical\",\n    },\n    {\n      name: \"swift\",\n      levelLearnedAt: 26,\n      accuracy: null,\n      power: 60,\n      type: \"normal\",\n      damageClass: \"special\",\n    },\n    {\n      name: \"nuzzle\",\n      levelLearnedAt: 23,\n      accuracy: 100,\n      power: 20,\n      type: \"electric\",\n      damageClass: \"physical\",\n    },\n  ],\n  currentMovesList: [\n    {\n      name: \"spark\",\n      levelLearnedAt: 26,\n      accuracy: 100,\n      power: 65,\n      type: \"electric\",\n      damageClass: \"physical\",\n    },\n    {\n      name: \"feint\",\n      levelLearnedAt: 29,\n      accuracy: 100,\n      power: 30,\n      type: \"normal\",\n      damageClass: \"physical\",\n    },\n    {\n      name: \"swift\",\n      levelLearnedAt: 26,\n      accuracy: null,\n      power: 60,\n      type: \"normal\",\n      damageClass: \"special\",\n    },\n    {\n      name: \"nuzzle\",\n      levelLearnedAt: 23,\n      accuracy: 100,\n      power: 20,\n      type: \"electric\",\n      damageClass: \"physical\",\n    },\n  ],\n  spriteList: [\n    {\n      name: \"back_default\",\n      url: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/25.png\",\n    },\n    {\n      name: \"back_female\",\n      url: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/female/25.png\",\n    },\n    {\n      name: \"back_shiny\",\n      url: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/shiny/25.png\",\n    },\n    {\n      name: \"back_shiny_female\",\n      url: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/shiny/female/25.png\",\n    },\n    {\n      name: \"front_default\",\n      url: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/25.png\",\n    },\n    {\n      name: \"front_female\",\n      url: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/female/25.png\",\n    },\n    {\n      name: \"front_shiny\",\n      url: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/shiny/25.png\",\n    },\n    {\n      name: \"front_shiny_female\",\n      url: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/shiny/female/25.png\",\n    },\n  ],\n  types: [\n    {\n      name: \"electric\",\n      url: \"https://pokeapi.co/api/v2/type/13/\",\n    },\n  ],\n};\n\nexport default pikachu;\n","export default class Pokemon {\n  constructor(identifier, level) {\n    //id can be a pokemon's name or number\n    this.level = (typeof level ==='number') ? level : parseInt(level, 10);\n\n    this.name = \"\";\n    this.id = \"\";\n    this.url = `https://pokeapi.co/api/v2/pokemon/${identifier}`; //adjusts url based on id given\n    // this.availableMovesList = [];\n    this.learnedMovesList = [];\n    this.currentMovesList = [];\n    this.types = [];\n    this.damage = 0;\n    this.currentHealth = 100;\n    this.baseStats = [];\n    this.currentStats = [];\n    this.abilities = [];\n    this.spriteList = [];\n  }\n\n  // async getInfo() {\n  //     try{\n  //         const response = await fetch(this.url);\n  //         const data = await response.json();\n  //         this.name = data.name;\n  //         this.id = data.id;\n  //         this.baseExperience = data.base_experience;\n  //         this.currentExperience = Math.pow(this.level, 3);\n  //         console.log(data.name);\n  //         console.log(data.stats);\n\n  //         //get moves\n  //         data.moves.map(async function(move) {\n  //             const moveUrl = move.move.url; //gets move url from pokemon info\n  //             const moveDataResponse = await fetch(moveUrl); //fetch move info\n  //             const moveData = await moveDataResponse.json(); //convert move info to json\n  //             const levelLearned = move.version_group_details[0].level_learned_at; //get info when the pokemon learns the move\n\n  //             const moveInfo = { //consolidates move info to add to array\n  //                 name: moveData.name,\n  //                 levelLearnedAt: parseInt(levelLearned, 10),\n  //                 accuracy: parseInt(moveData.accuracy, 10),\n  //                 power: parseInt(moveData.power, 10),\n  //                 type: moveData.type.name,\n  //                 damageClass: moveData.damage_class.name\n  //             }\n  //             // this.movesList.push(moveInfo);\n  //             if (levelLearned !== 0) { //only adds moves the pokemon will learn naturally by leveling up\n  //                 this.learnedMovesList.push(moveInfo);\n  //             }\n  //             if (this.level >= levelLearned && levelLearned !== 0) { //adds moves to current moves depending on pokemon's level\n  //                 this.currentMovesList.push(moveInfo);\n  //                 if (this.currentMovesList.length > 4) {\n  //                     this.currentMovesList.shift();\n  //                 }\n  //             }\n  //         }, this);\n\n  //         //get stats\n  //         data.stats.map(async function(stat) {\n  //             const statName = stat.stat.name;\n  //             const baseStatValue = stat.base_stat;\n  //             const baseStat = {name: statName, value: parseInt(baseStatValue)};\n  //             const currentStat = {name: statName, value: 0}\n\n  //             if (statName === 'hp') {\n  //                 currentStat.value = Math.floor((2*parseInt(baseStatValue, 10)*this.level)/100 + this.level +10)\n  //             } else {\n  //                 currentStat.value = Math.floor((2*parseInt(baseStatValue, 10)*this.level)/100 + 5)\n  //             }\n\n  //             this.baseStats.push(baseStat);\n  //             this.currentStats.push(currentStat)\n  //         }, this);\n\n  //         //get types\n  //         data.types.map(async function(type) {\n  //             const typeName = type.type.name;\n  //             const typeUrl = type.type.url;\n  //             const typeObject = {name: typeName, url: typeUrl};\n\n  //             this.types.push(typeObject);\n\n  //         }, this)\n\n  //         //get sprites\n  //         for (let spriteKey in data.sprites) {\n  //             const spriteName = spriteKey;\n  //             const spriteUrl = data.sprites[spriteKey];\n  //             const spriteObject = {name: spriteName, url: spriteUrl};\n  //             if (spriteName !== 'versions' && spriteName !== 'other') {\n  //                 this.spriteList.push(spriteObject);\n  //             }\n  //         }\n\n  //     } catch(error) {\n  //         console.log(error);\n  //     } finally {\n  //         console.log(this);\n  //     }\n  // }\n\n  giveExperience(isWild = true) {\n    //returns the amount of experience given for defeating\n    const wildMultiplier = isWild ? 1 : 1.5; //gives 1.5 times experience in trainer battles\n    return (this.baseExperience * this.level * wildMultiplier) / 7;\n  }\n}\n","import Pokemon from \"./pokemonClass.js\";\r\n\r\nasync function getNewMoves(data) {\r\n\r\n  const newMoves = {\r\n    allowableMovesList: [],\r\n    learnedMovesList: []\r\n  };\r\n\r\n  newMoves.allowableMovesList = await Promise.all(data.moves.map(async function (move) {\r\n    const moveUrl = move.move.url; //gets move url from pokemon info\r\n    const moveData = await (await fetch(moveUrl)).json();\r\n    return moveData;\r\n  }))\r\n  \r\n  //reduce to only moves learned naturally in ascending order\r\n  newMoves.learnedMovesList = data.moves.reduce((runningList, move, i) => {\r\n    const levelLearned = move.version_group_details[0].level_learned_at;\r\n  \r\n    if (levelLearned !== 0) {\r\n  \r\n      const moveInfo = { //consolidates move info to add to array\r\n      name: move.move.name,\r\n      levelLearnedAt: parseInt(levelLearned, 10),\r\n      accuracy: parseInt(newMoves.allowableMovesList[i].accuracy, 10),\r\n      power: parseInt(newMoves.allowableMovesList[i].power, 10),\r\n      type: newMoves.allowableMovesList[i].type.name,\r\n      damageClass: newMoves.allowableMovesList[i].damage_class.name,\r\n    };\r\n    \r\n    runningList.push(moveInfo);\r\n    }\r\n  return runningList;\r\n\r\n  }, []).sort((x,y ) => x.levelLearnedAt - y.levelLearnedAt); //sort moves to ascending order based on level learned\r\n\r\n  return newMoves;\r\n}\r\n\r\nasync function getNewEvolutionChain(data) {\r\n\r\n  let newName = data.name;\r\n  let speciesData = await (await fetch(data.species.url)).json();\r\n  let evolutionChainData = await (await fetch(speciesData.evolution_chain.url)).json();\r\n  let newEvolutionChain = {};\r\n\r\n  let doesEvolve = (evolutionChainData.chain.evolves_to.length > 0) ? true : false;\r\n\r\n  if (doesEvolve) {\r\n    let currentStage = evolutionChainData.chain;\r\n    let stageNumber = 1;\r\n    let triggerType = '';\r\n    let evolutionArray = [];\r\n    let continueNum = 2;\r\n    \r\n    //cycle through evolution stage objects until there isn't a deeper level\r\n    do {\r\n      //if there isn't another level deeper, run one more time\r\n      continueNum = (currentStage.evolves_to.length > 0) ? 2:1;\r\n\r\n      triggerType = (continueNum > 1) ? currentStage.evolves_to[0].evolution_details[0].trigger.name : '';\r\n\r\n      let pokemonStageInfo = {\r\n        stageNumber : stageNumber,\r\n        stageName : currentStage.species.name,\r\n        stageUrl : '',\r\n      }\r\n\r\n      if(triggerType) {\r\n        pokemonStageInfo.evolutionType = triggerType;\r\n        pokemonStageInfo.evolutionTrigger = (triggerType === 'use-item') ? \r\n          currentStage.evolves_to[0].evolution_details[0].item.name : currentStage.evolves_to[0].evolution_details[0].min_level;\r\n        pokemonStageInfo.evolveToName = currentStage.evolves_to[0].species.name\r\n        pokemonStageInfo.evolveToUrl = `https://pokeapi.co/api/v2/pokemon/${pokemonStageInfo.evolveToName}`;\r\n      } else {\r\n        pokemonStageInfo.evolutionType = 'Final Stage';\r\n        pokemonStageInfo.evolutionTrigger = 'Final Stage';\r\n        pokemonStageInfo.evolveToName = 'Final Stage'\r\n        pokemonStageInfo.evolveToUrl = `Final Stage`;\r\n      }\r\n\r\n      pokemonStageInfo.stageUrl = `https://pokeapi.co/api/v2/pokemon/${pokemonStageInfo.stageName}`;\r\n\r\n      evolutionArray.push(pokemonStageInfo);\r\n      stageNumber++;\r\n      currentStage = currentStage.evolves_to[0]; //make the next level deeper the current level for the next loop\r\n      continueNum--;\r\n\r\n    } while(continueNum > 0)\r\n\r\n    //establish current stage evolution info\r\n    newEvolutionChain.currentEvolutionStage = evolutionArray.find(stage => stage.stageName === newName);\r\n    newEvolutionChain.evolutionType = newEvolutionChain.currentEvolutionStage.evolutionType;\r\n    newEvolutionChain.evolutionTrigger = newEvolutionChain.currentEvolutionStage.evolutionTrigger;\r\n    newEvolutionChain.nextStage = (evolutionArray[newEvolutionChain.currentEvolutionStage.stageNumber]) ? \r\n      evolutionArray[newEvolutionChain.currentEvolutionStage.stageNumber] : '';\r\n\r\n  }  \r\n\r\n  return newEvolutionChain;\r\n\r\n}\r\n\r\nfunction getNewTypes(data) {\r\n\r\n  let newTypes = data.types.map(function (type) {\r\n    const typeName = type.type.name;\r\n    const typeUrl = type.type.url;\r\n    const typeObject = { name: typeName, url: typeUrl };\r\n\r\n    return typeObject;\r\n\r\n  });\r\n\r\n  return newTypes;\r\n}\r\n\r\nfunction getCurrentMoves(learnedMovesList, Level) {\r\n  \r\n  //set latest 4 moves as currently learned moves\r\n  let currentMovesList = learnedMovesList.reduce((runningList, move) => {\r\n    \r\n    if (move.levelLearnedAt <= Level) {\r\n      runningList.push(move);\r\n    }\r\n    if (runningList.length > 4) {\r\n      runningList.shift();\r\n    }\r\n  \r\n    return runningList;\r\n  }, [])\r\n  \r\n  return currentMovesList;\r\n  \r\n}\r\n\r\nfunction getNewStats(data, level) {\r\n  \r\n  let newStats = {\r\n    baseStats: [],\r\n    currentStats: []\r\n  }\r\n\r\n  //get base stats\r\n  newStats.baseStats = data.stats.map((stat) => {\r\n    const baseInfo = { name: stat.stat.name, value: parseInt(stat.base_stat) };\r\n    return baseInfo;\r\n  });\r\n  \r\n  //calculate current stats based on pokemon level\r\n  newStats.currentStats = newStats.baseStats.map((stat, i) => {\r\n    let baseStat = newStats.baseStats[i].value;\r\n    let currentLevel = level;\r\n    let currentName = stat.name;\r\n    let currentValue = 0;\r\n  \r\n    if (currentName === \"hp\") {\r\n      currentValue = Math.floor((2 * baseStat * currentLevel) / 100 + currentLevel + 10);\r\n    } else {\r\n      currentValue = Math.floor((2 * baseStat * currentLevel) / 100 + 5);\r\n    }\r\n  \r\n    const currentStat = { name: currentName, value: currentValue };\r\n    return currentStat;\r\n  });\r\n\r\n  return newStats;\r\n\r\n}\r\n\r\nfunction getNewSprites(data) {\r\n\r\n  let spriteList = [];\r\n\r\n  for (let spriteKey in data.sprites) {\r\n    const spriteName = spriteKey;\r\n    const spriteUrl = data.sprites[spriteKey];\r\n    const spriteObject = { name: spriteName, url: spriteUrl };\r\n    if (spriteName !== \"versions\" && spriteName !== \"other\") {\r\n      spriteList.push(spriteObject);\r\n    }\r\n  }\r\n\r\n  return spriteList;\r\n\r\n}\r\n\r\nasync function getNewPokemon(identifier, level) {\r\n  const newPokemon = new Pokemon(identifier, level);\r\n\r\n  try {\r\n    const url = `https://pokeapi.co/api/v2/pokemon/${identifier}`; //adjusts url based on id given\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    newPokemon.speciesData = await (await fetch(data.species.url)).json();\r\n    newPokemon.evolutionData = await (await fetch(newPokemon.speciesData.evolution_chain.url)).json();\r\n    newPokemon.data = data;\r\n    newPokemon.name = data.name;\r\n    newPokemon.id = data.id;\r\n    newPokemon.level = (typeof level === 'number') ? level : parseInt(level, 10);\r\n    newPokemon.baseExperience = data.base_experience;\r\n    newPokemon.currentExperience = newPokemon.level ** 3;\r\n\r\n    //get moves\r\n    ({allowableMovesList: newPokemon.allowableMovesList, learnedMovesList: newPokemon.learnedMovesList } \r\n      = await getNewMoves(newPokemon.data));\r\n\r\n    //set learned moves\r\n    newPokemon.currentMovesList = getCurrentMoves(newPokemon.learnedMovesList, newPokemon.level);\r\n    \r\n    //get stats\r\n    ({baseStats: newPokemon.baseStats, currentStats: newPokemon.currentStats} = getNewStats(newPokemon.data, newPokemon.level));\r\n\r\n    //get types\r\n    newPokemon.types = getNewTypes(newPokemon.data);\r\n\r\n    //get sprites\r\n    newPokemon.spriteList = getNewSprites(data);\r\n\r\n    //get evolution info\r\n    ({currentEvolutionStage: newPokemon.currentStage, evolutionType: newPokemon.evolutionType, evolutionTrigger: newPokemon.evolutionTrigger,\r\n      nextStage: newPokemon.nextStage} = await getNewEvolutionChain(newPokemon.data));\r\n\r\n    return newPokemon;\r\n\r\n  } catch (error) {\r\n    console.log(error);\r\n    return false\r\n  } finally {\r\n    console.log(newPokemon);\r\n  }\r\n}\r\n\r\nexport default getNewPokemon;\r\n","import \"./App.css\";\r\nimport React, { Component } from \"react\";\r\nimport SearchBox from \"./Components/SearchBox\";\r\nimport PokemonInfo from \"./Components/PokemonInfo.js\";\r\nimport pikachu from \"./Components/Pokemon/pikachu\";\r\nimport getNewPokemon from \"./Components/getNewPokemon\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      identifierField: \"\",\r\n      levelField: 0,\r\n      displayPokemon: pikachu,\r\n      pokemonList: [pikachu],\r\n    };\r\n  }\r\n\r\n  // onSearchChange = (event) => {\r\n  //   this.setState({searchfield: event.target.value })\r\n\r\n  //   const pikachu = new Pokemon(this.state.searchfield, 30);\r\n  //   pikachu.getInfo();\r\n  //   this.setState({displayPokemon: pikachu});\r\n  // }\r\n  updateDisplay = (event) => {\r\n    const eventId = event.target.id;\r\n    const eventValue = event.target.value;\r\n    const { identifierField, levelField } = this.state;\r\n    console.log(\"identifierField: \",identifierField);\r\n    console.log(\"levelField: \", levelField);\r\n    console.log(\"event: \", event);\r\n\r\n    console.log(\"event.target.value: \", event.target.value);\r\n    if (eventId === \"searchIdentifier\") {\r\n      let newSearchIdentifier = eventValue.toLowerCase();\r\n      this.setState({ identifierField: newSearchIdentifier });\r\n      // this.submitInput(eventValue, levelField);\r\n    } else if (eventId === \"searchLevel\") {\r\n      let newSearchLevel = (typeof eventValue === 'number') ? eventValue : parseInt(eventValue, 10);\r\n      this.setState({ levelField: newSearchLevel });\r\n      // this.submitInput(identifierField, eventValue);\r\n    } else {\r\n      console.log(\"event: \", event);\r\n    }\r\n\r\n    console.log(\"this.state: \", this.state);\r\n  };\r\n\r\n  async setNewPokemon(identifier, level) {\r\n    const newPokemon = await getNewPokemon(identifier, level);\r\n    console.log(newPokemon);\r\n    if (newPokemon) {\r\n      this.setState({ pokemonList: [...this.state.pokemonList, newPokemon] });\r\n      this.setState({ displayPokemon: newPokemon });\r\n    } else {\r\n      typeof identifier === 'number' ? alert(`Sorry, ${identifier} is not a valid Pokemon Number`) \r\n        : alert(`Sorry, ${identifier} is not a valid Pokemon Name`);\r\n    }\r\n  }\r\n\r\n  submitInput = async () => {\r\n\r\n    if (this.state.levelField > 0 && this.state.levelField <= 100) {\r\n        const { identifierField, levelField } = this.state;\r\n        try {\r\n          if (this.state.levelField > 0 && this.state.identifierField.length > 0) {\r\n            await this.setNewPokemon(identifierField, levelField);\r\n          }\r\n        } catch (error) {\r\n          console.log(\"oops: \", error);\r\n        }\r\n    } else {\r\n      alert('Sorry, a Pokemon\\'s level must be from 1 - 100');\r\n    }\r\n\r\n  };\r\n\r\n  // submitInput = () => {\r\n  //   const { identifierField, levelField } = this.state;\r\n  //   console.log(identifierField);\r\n  //   console.log(levelField);\r\n  //   try {\r\n  //     if (this.state.levelField > 0 && this.state.identifierField.length > 0) {\r\n  //       this.setNewPokemon(identifierField, levelField);\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.log(\"oops: \", error);\r\n  //   }\r\n  //   console.log(this.state);\r\n  // };\r\n\r\n  levelUp = () => {\r\n    //update stats\r\n    const tempDisplayPoke = Object.assign({}, this.state.displayPokemon);\r\n    tempDisplayPoke.level++;\r\n\r\n    const currentStats = tempDisplayPoke.currentStats.slice();\r\n    const baseStats = tempDisplayPoke.baseStats.slice();\r\n\r\n    const newStats = currentStats.map((stat, i) => {\r\n      const newStat = { name: \"\", value: 0 };\r\n      const baseStatValue = baseStats[i].value;\r\n      newStat.name = stat.name;\r\n      if (newStat.name === \"hp\") {\r\n        newStat.value = Math.floor(\r\n          (2 * baseStatValue * tempDisplayPoke.level) / 100 +\r\n            tempDisplayPoke.level +\r\n            10\r\n        );\r\n      } else {\r\n        newStat.value = Math.floor(\r\n          (2 * baseStatValue * tempDisplayPoke.level) / 100 + 5\r\n        );\r\n      }\r\n      return newStat;\r\n    });\r\n\r\n    tempDisplayPoke.currentStats = newStats;\r\n    this.setState({ displayPokemon: tempDisplayPoke, levelField: tempDisplayPoke.level});\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App mw7 center\">\r\n        <SearchBox\r\n          updateDisplay={this.updateDisplay}\r\n          submitInput={this.submitInput}\r\n          levelUp={this.levelUp}\r\n        />\r\n        <PokemonInfo pokemon={this.state.displayPokemon} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}